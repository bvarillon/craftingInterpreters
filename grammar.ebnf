program     → declaration* EOF ;
declaration → funDecl | varDecl | statement ;
funDecl     → "fun" function ;
function    → IDENTIFIER "(" parameters? ")" block ;
parameters  → IDENTIFIER ( "," IDENTIFIER )* ;
varDecl     → "var" IDENTIFIER ("=" expression) ";" ;
statement   → exprStmt | printStmt | ifStmt | whileStmt | forStmt | returnStmt | block;
block       → "{" declaration* "}" ";" ;
returnStmt  → "return" expression? ";" ;
forStmt     → "for" "(" (varDecl | exprStmt | ";") expression? ";" | expression? ")" statement ;
whileStmt   → "while" "(" expression ")" statement ;
ifStmt      → "if" "(" expression ")" statement ("else" statement)? ;
exprStmt    → expression ";" ;
printStmt   → "print" expression ";" ;
expression  → comma_sep ;
comma_sep   → ternary_op ("," ternary_op)* ;
ternary_op  → assignment ("?" assignment ":" assignment)?
assignment  → IDENTIFIER "=" assignment | logic_or ;
logic_or    → logic_and ("or" logic_and)* ; 
logic_and   → equality ("and" equality)* ;
equality    → comparison ( ( "!=" | "==" ) comparison )* ;
comparison  → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        → factor ( ( "-" | "+" ) factor )* ;
factor      → unary ( ( "/" | "*" ) unary )* ;
unary       → ( "!" | "-" ) unary | call;
call        → primary ( "(" arguments? ")" )* ;
arguments   → expression ( "," expression )* ;
primary     → NUMBER | STRING | "true" | "false" | "nil"
                | "(" expression ")" | IDENTIFIER | missing_op ;
missing_op     → ("+" | "/" | "*" | "<=" | "<" | ">=" | ">" | "!=" | "==") expression ;
